import main
import numpy as np
import tensorflow as tf
import pandas as pd
import random
import pickle
from generate_signals import generate_samples_from_age
from class_CVAE import CVAE
from configuration_file import conv_architectures, linear_architectures


def test_save_samples_from_age_range():
    """
    Test the save_samples_from_age_range function in the main module
    """

    # Generate random train_labels
    train_labels = pd.DataFrame(np.random.randn(10, 10))
    min_age = 20
    max_age = 25
    n = 5

    # Define the input parameters for CVAE initialization
    latent_dim = 10
    label_dim = 10
    input_dim = 1024

    # Create an instance of CVAE
    cvae = CVAE(
        latent_dim=latent_dim,
        label_dim=label_dim,
        conv_layers_settings=conv_architectures,
        linear_layers_settings=linear_architectures,
        input_dim=input_dim,
    )

    # Call the save_samples_from_age_range function
    main.save_samples_from_age_range(cvae, train_labels, min_age, max_age, n)

    # Check if the file has been successfully saved
    file_path = f"generated_samples_{min_age}_{max_age}2.pickle"
    assert os.path.exists(file_path)

    # Load the saved file
    with open(file_path, "rb") as f:
        saved_data = pickle.load(f)

    # Check if the loaded data has the correct shapes
    assert isinstance(saved_data, tuple)
    assert len(saved_data) == 2
    X_generate, Z_generate = saved_data
    assert X_generate.shape == (n * (max_age - min_age), cvae.input_dim + cvae.label_dim, 1)
    assert Z_generate.shape == (n * (max_age - min_age), cvae.label_dim)

    # Check if the loaded data contains valid samples
    predictions = cvae.decode(tf.convert_to_tensor(X_generate, dtype=tf.float32))
    assert predictions.shape == (n * (max_age - min_age), cvae.input_dim, 1)


# Run the test function
test_save_samples_from_age_range()

